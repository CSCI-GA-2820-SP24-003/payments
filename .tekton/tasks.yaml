# These are custom tasks that are not on Tekton Hub
---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Code Quality
    tekton.dev/displayName: pylint
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: 'linux/amd64,linux/s390x,linux/ppc64le'
    tekton.dev/tags: 'python, pylint, poetry'
  name: pylint
  labels:
    app.kubernetes.io/version: '0.4'
spec:
  description: Use to run pylint on the provided input source. If Poetry is being used it will detect the poetry.lock file and install via requirements export.
  params:
    - default: 'docker.io/python:3.11-slim'
      description: The container image with pylint
      name: image
      type: string
    - default: .
      description: The path to the module which should be analyzed by pylint
      name: path
      type: string
    - default: []
      description: The arguments to pass to the pylint CLI.
      name: args
      type: array
    - default: requirements.txt
      description: The name of the requirements file inside the source location
      name: requirements_file
      type: string
  steps:
    - args:
        - $(params.args)
      computeResources: {}
      image: $(params.image)
      name: pylint
      script: |
        #!/bin/bash
        set -e
        export PATH=$PATH:$HOME/.local/bin:

        echo "***** Installing dependencies *****"
        if [ -e "poetry.lock" ]; then
          echo "Found poetry.lock file: using poetry "
          python -m pip install poetry poetry-plugin-export
          poetry export --with=dev -f requirements.txt --output requirements.txt
          python -m pip install --user -r requirements.txt
        elif [ -n "$(params.requirements_file)" ] && [ -e "$(params.requirements_file)" ]; then
          python -m pip install --user -r "$(params.requirements_file)"
        fi

        # Make sure pylint is installed
        python -m pip install pylint

        echo "***** Running Linting *****"
        pylint $@ "$(params.path)"
      workingDir: $(workspaces.source.path)
  workspaces:
    - description: The workspace with the source code.
      name: source


---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Testing
    tekton.dev/displayName: pytest tests
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: 'linux/amd64,linux/s390x,linux/ppc64le'
    tekton.dev/tags: 'python, pytest'
  name: pytest-env
  labels:
    app.kubernetes.io/version: '0.1'
spec:
  description: |-
    This task can be used to perform unit tests with pytest. It supports both requirements.txt and poetry.lock files.
    It also has the ability to create an environment variable that is sourced from a Secret. This allows you to define credentials that can be used to connect to a test database.
  params:
    - default: []
      description: The arguments to pass to the pytest CLI.
      name: PYTEST_ARGS
      type: array
    - default: postgres-creds
      description: The name of the secret containing a database_uri key
      name: SECRET_NAME
      type: string
    - default: database_uri
      description: The name of the key that contains the database uri
      name: SECRET_KEY
      type: string
  steps:
    - args:
        - $(params.PYTEST_ARGS)
      computeResources: {}
      env:
        - name: DATABASE_URI
          valueFrom:
            secretKeyRef:
              key: $(params.SECRET_KEY)
              name: $(params.SECRET_NAME)
      image: 'docker.io/python:3.11-slim'
      name: pytest
      script: |
        #!/bin/bash
        set -e
        export PATH=$PATH:$HOME/.local/bin:

        echo "***** Installing dependencies *****"
        if [ -e "poetry.lock" ]; then
          echo "Found poetry.lock file: using poetry "
          python -m pip install poetry poetry-plugin-export
          poetry export --with=dev -f requirements.txt --output requirements.txt
          python -m pip install --user -r requirements.txt
        elif -e "requirements.txt" ]; then
          python -m pip install --user -r requirements.txt
        fi

        # Make sure pylint is installed
        python -m pip install pytest

        echo "***** Running Tests *****"
        pytest --version
        pytest
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
   tekton.dev/categories: Deployment
    tekton.dev/displayName: deploy image
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: 'openshift, deploy'
  name: deploy-image
  labels:
    app.kubernetes.io/version: '0.1'
spec:
  description: This task will update the deployment.yaml with the latest image name and then apply that yaml file and it's service file.
  params:
    - description: The fully qualified name of the new image to deploy
      name: image_name
      type: string
    - default: k8s
      description: The directory in source that contains yaml manifests
      name: manifest_dir
      type: string
  steps:
    - args:
        - |-
          #!/bin/bash
          set -e

          echo Applying manifests in $(inputs.params.manifest_dir) directory

          echo "**********************************************************************"
          echo "Installing YQ..."
          echo "**********************************************************************"
          wget -qO /usr/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod a+x /usr/bin/yq

          echo "*********************  DEPLOYMENT  ***********************"
          echo "Deploying $(inputs.params.image_name) ..."

          yq -e -i '.spec.template.spec.containers[0].image="$(inputs.params.image_name)"' $(inputs.params.manifest_dir)/deployment.yaml
          # sed -i 's|'"$(inputs.params.old_image_name)"'|'"$(inputs.params.image_name)"'|g' $(inputs.params.manifest_dir)/deployment.yaml
          cat $(inputs.params.manifest_dir)/deployment.yaml

          echo "************************************************************"
          echo "OC APPLY..."
          oc apply -f $(inputs.params.manifest_dir)/deployment.yaml
          oc apply -f $(inputs.params.manifest_dir)/service.yaml

          echo "************************************************************"
          sleep 3
          echo "Pods:"
          oc get pods
          echo ""
      command:
        - /bin/bash
        - '-c'
      computeResources: {}
      image: 'quay.io/openshift/origin-cli:latest'
      name: deploy
      workingDir: /workspace/source
  workspaces:
    - name: source


---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Deployment
    tekton.dev/displayName: deploy
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: 'openshift, deploy'
  name: apply-manifests
  labels:
    app.kubernetes.io/version: '0.1'
spec:
  description: This task will deploy all of the yaml files in the manifest folder.
  params:
    - default: k8s
      description: The directory in source that contains yaml manifests
      name: manifest_dir
      type: string
  steps:
    - args:
        - |-
          echo Applying manifests in $(inputs.params.manifest_dir) directory
          oc apply -f $(inputs.params.manifest_dir)
          echo -----------------------------------
      command:
        - /bin/bash
        - '-c'
      computeResources: {}
      image: 'quay.io/openshift/origin-cli:latest'
      name: apply
      workingDir: /workspace/source
  workspaces:
    - name: source

---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  annotations:
    tekton.dev/categories: Testing
    tekton.dev/displayName: bdd tests
    tekton.dev/pipelines.minVersion: 0.17.0
    tekton.dev/platforms: linux/amd64
    tekton.dev/tags: 'python, bdd, behave'
  name: behave
  labels:
    app.kubernetes.io/version: '0.1'
spec:
  description: This task can be used to perform bdd tests with behave.
  params:
    - description: The url of the application to test
      name: BASE_URL
      type: string
    - default: '60'
      description: The number of seconds to wait for a reply
      name: WAIT_SECONDS
      type: string
    - default: chrome
      description: The web driver to use (chrome or firefox)
      name: DRIVER
      type: string
  steps:
    - computeResources: {}
      env:
        - name: BASE_URL
          value: $(params.BASE_URL)
        - name: WAIT_SECONDS
          value: $(params.WAIT_SECONDS)
        - name: DRIVER
          value: $(params.DRIVER)
      image: rofrano/pipeline-selenium
      name: behave
      script: |
        #!/bin/bash
        set -e
        export PATH=$PATH:$HOME/.local/bin:

        echo "***** Installing dependencies *****"
        if [ -e "poetry.lock" ]; then
          echo "Found poetry.lock file: using poetry"
          python -m pip install poetry poetry-plugin-export
          poetry export --with=dev -f requirements.txt --output requirements.txt
        fi
        python -m pip install --user -r requirements.txt

        echo "***** Running Tests *****"
        behave
      workingDir: $(workspaces.source.path)
  workspaces:
    - name: source

